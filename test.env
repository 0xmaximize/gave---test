<div className="grid gap-4 justify-center items-center mt-20">
          <Card className="bg-white/5 w-[360px]">
            <CardHeader>
              <h4 className="text-xl text-white">Available Rewards</h4>
            </CardHeader>
            <Divider className="bg-white/5" />
            <CardBody className="px-2">
              <div className="flex justify-around items-center gap-4 text-white mx-2 px-2">
                
              <div className="bg-white/10 p-3 rounded-xl gap-2 justify-center items-center">
                  {!claimableRewards
                    ? "0.0000000 GVT"
                    : `${(+ethers.utils.formatUnits(claimableRewards, 18)).toFixed(6)} ${tokenBalance?.symbol}`}
                </div>
                {!address ? (
                  <Button variant="flat" size="lg">
                    Withdraw
                  </Button>
      ) : (
                <Web3Button
                  style={{padding:'1px', borderRadius:'14px'}}
                  action={(contract) => contract.call("claimRewards")}
                  contractAddress={stakingContractAddress}
                >
                  Withdraw
                </Web3Button>
      )
      }
              </div>
            </CardBody>
          </Card>
          
          {/* Other cards go here */}
          
          <Card className="bg-white/5">
            <CardBody className="p-4">
              <div className="flex justify-between items-center gap-4 text-white">
                <p>Your Balance : </p>
                <div className="bg-white/10 p-2 rounded-xl gap-2 justify-center items-center">
                {(!address || tokenBalance?.displayValue === undefined)
    ? "0.00000 GVT"
    : `${(+tokenBalance.displayValue).toFixed(6)} ${tokenBalance.symbol}`}
                </div>
              </div>
            </CardBody>
          </Card>
          
          <Card className="bg-white/5">
            <CardBody className="p-4">
              <div className="flex justify-between items-center gap-4 text-white">
                <p>Total G-NFT mined : </p>
                <div className="bg-white/10 p-2 rounded-xl justify-center items-center">
                  {totalNFTStaked}{" "} G-NFT
                </div>
              </div>
            </CardBody>
          </Card>
          
        </div>
        </div>
        <div>
          {/* ... */}
        </div>
        <div className="grid md:flex gap-4">
          <StakeModal />
          <UnstakeModal />
        </div>
        <h2 className="font-bold text-3xl mt-20">Your Staked NFTs</h2>
        <div className="flex flex-row gap-2">
          {stakedTokens &&
            stakedTokens[0]?.map((stakedToken: BigNumber) => (
              <NFTCard
                tokenId={stakedToken.toNumber()}
                key={stakedToken.toString()}
              />
            ))}
        </div>
        <hr className={`${styles.divider} ${styles.spacerTop}`} />
        <h2 className="font-bold text-3xl">Available NFTs</h2>
        <div className={styles.nftBoxGrid}>
          {ownedNfts?.map((nft) => (
            <div className={styles.nftBox} key={nft.metadata.id.toString()}>
              <ThirdwebNftMedia
                metadata={nft.metadata}
                className={styles.nftMedia}
              />
              <h3>{nft.metadata.name}</h3>
              <Web3Button
                contractAddress={stakingContractAddress}
                action={() => stakeNft(nft.metadata.id)}
              >
                Stake
              </Web3Button>
            </div>
          ))}